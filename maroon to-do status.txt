To-do:


ASAP:
instead of this;	
	      for (let i = 0; i < addressData.length; i++) {
		make it for (let address of addresses)

-settle on a naming convention for the DB files - should the functions all start with retrieve?
	settle on a naming convention for Doctor_ID or DoctorID, Patient_ID, etc. there should be no User_ID/UserID in the DB files, should all be doc or patient (unless auth)
-make all simplification functions within classes to be private
-mini bug when making a booking. make a booking with `changes in behavior`. The time is 10 AM- 10AM. Should say something like (10AM (july 17) - 10AM (july 18))
added a appointment_timespan, and changed from patientID--> petID. - need to change the front-end accordingly
-add choose your pet to make an appointment. if the user isn't logged in, show a login/register button in the booking section.
	the first question should be: choose which pet you would like to take to the vet
		if the user only has one vet, skip that question, and just set the state to that pet/pettype
	if the vet doesn't service that specific pet type, then show message: "Dr. __ doesn't service [type of pet]". Have a dummy button that says: "Search for vets near you that service [pet type]"
	after the appointment is made, should go to a confirmation page after the 'finalize-booking' page, which lists the details in pretty format. from there, have a button: go to dashboard

-start figuring out only being able to make appointments during available time slots (shouldn't be able to book an appointment while that time slot is booked)
- go through backend, fix any examples of the null/400 respone returning late
	ie. save doctordata ctrl. line 610. the 400 status should return before the if  and if else statments.
		should be: if (_.isEmpty(addressResults) && (_.isEmpty(AddressData))

-try making an appointment, not requesting, going back, and making a different appointmet. does session storage updat?
-think about how isActive should work - what actually happens when a user deletes their account. should a new user be allowed to make an account with that same email instantaneosly?

-consider combining the two add preVet Education callback functions
-go through backend code, look for repetetive code to outsource to utils (some of the date code seems repetetive)

make the phone number input in the location.js only accept numbers (Phone input)
Run lint tests to check for camelcase, and for over 200 line fcns

-duplicate entries need to be accounted for when added to DB. Unique constraints. when the same data is entered into the pre_vet_edcatinn_mapping table, it gives an error, but doesn't enter the data.
	Make the error on the front-end be say something like: duplicate entry. Or, don't allow the user to add the same entry twice
	Do this for all tables

--change all front-end select month, day, year into a "date", like in pets.js
	-make the date only be sometime in the past

- when registering as a patient, need to make it clear when the user is entering data regrading the human, and when about the pet

-Reviews:
	Patient's able to make a review after the appointment date is completed, given that the appointment is approved by the doctor.

On the vet dashboard, make the appointments clickable, shows the patients details, pet details, etc.
	Should go to a newly created appointment page, which nicely lays out the appointment details.
	If that event is clicked on from calendar view, it should go to that link as well

- go throgh DoctorDashboard Layout txt file

LATER:
-CODE CONCISION: Cut any function more than 100 lines into parts. I don't want massive functions - most can be distilled into smaller parts

-figure out IP Address situation (for the login and security page). Also see if can figure out what kind of device the user has

Make the "Add Address" Button Finalize a Location, make it within the accordion.
	So when add address is pressed, it becomes a pretty-looking text (can edit it by pressing a pencil in the top right or something)
	Add a new "Add new address" button to add a new acordion strip
	Won't need a save button. the add/delete buttons will act as saves. will need to make the delete button double confirmation like everything else

Write documentation, especially for saveAddresses

-instead of re-rendering pateint dashboard each time, maybe there's a way to set the dashborad data from the back-end.

Add a section in doctordetails for wheather or not the doc works for a practice/company (will neeed to create a lookup and mapping table for vet companies as options)

-- will likely need to simplify the select.js. what it"s doing rn is redundant. inside account details, it"s setting the value of the type of to the id. then, select has to find which type has that id.
	for example, if select Lemonade insurance, instead of setting selected vet school to Lemondae, it first sends back lemonad'es id, and then converts it to the name
simplification of pre-vet education needed.

Do the calculations for the next appointment dates on the back-end. Will need to figure out which dates/times area unavailable due to conflicting appointments.
	Also, due to the detailed_booking_availblity fields (how far in advance to book, etc.)

-Add an admin user type (manages/can see multiple doctor's activities)

-Add an Administrator user Type (God-mode, for me to log into any account in a read-only mode)
	assume someone's personality, not able to edit (read only)

--while loading, dashboard, account details should be like this:
	https://react-bootstrap.github.io/components/placeholder/

-- consider adding a verified column to the Credentials table (verify for both pts and docs) - not sure how to verify pts, would be a steep onboarding

start using bootstrap or integrate tailwind css classes. tell chatgpt to make pages prettier (header, etc.)

figure out phone_priority (address_data), currently sending it back as 0. Phone priority is for when one location has multiple phone numbers. So each object in the address list might have an object inside that contains phone numbers, link
	See 5/19 commit
-consider bringing back selecting the entire category in vet services

-allow for entering multiple degrees from one college (without causing the education table to break (because of the constraint))

inactivity logout ( 5 mins). implement on the verification level (in the jwt)

-I think the real selling point for pts to use the platform is knowing ahead of time if their insurance provider will cover a certain service. Will either require a lot of research, or data searching.
	Ask Phil if insurances openly disclose what they will/won't cover for which type of pets.
	Figure out a way to make it really user for users to figure out if their insurance covers a certain procedure.

-React browser warnins when adding pre_vet/vet education (see 7/4 keys commit)

-make entering time data into location.js easier. currently a pain in the ass, keeps reseting

