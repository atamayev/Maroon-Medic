To-do:

ASAP:
- de-simplify some of the componnets. don't just want to copy and paste the entire component out, want to take out small parts

1. finish going through all files, and decide which ones need search = true, which ones need dropdown =true
-- dropdown in header. choose which pages should have the search bar, and which should have the login/ake account dropdown

-- the state representing the pre-vet education should be a [{}, {}], with each object representing a seperate education
	then, before sending to the back-end, would convert objects to arrays.
-- need to integrate date when adding educations

TT stuff:
1. Continue going through all files, see what is repeated, outsource to a componnet (like custom-link)
2. consider changing to tsx framework - more exact (types, etc.)
3. dividie up the returns into functions, and then call teh functions in one return stateent at the bottom


fill in the rest of list details
	--checkbox integratoin vs dropdown. for insruances, checkbox. see email for details: "Fill in rest of lists"
	1. Address + phone numbers
	2. Education
	Think about how to integrate checkboxes vs drop down. For services, insurance, checkboxes will be better. For services, should have the category name be like a parent to all it's service names. If category selected, all service names selected. 

Other things like majors, schools should be drop-down. 
	when there is a checkbox, make it save automatically. 
		consider saving automatically for other data types as well
-- before saving email to db, make sure it is lowercase, so that when searching db, it is done in uniform way
	save emails as lowercase. then, when logging in, email should be lowercased before searching the db.
	-- figure out which data should be encrypted by the db. data at rest encryption

-- start outsourcing all internal operations within front-end components
-- change contexts to class-based, especially verification status, so it doesn't keep calling userverification. 

--after finish all parts of vet account details, begin to de-clutter that file, and figure out how to simplify data transport. 
Later:

--while loading, dashboard, account details should be like this:
	https://react-bootstrap.github.io/components/placeholder/
	
--make 2 dummy headers, one without search, and without profile & search.
	the one without profile and search should appear on the new doctor page.
	the one without search should appear on dashboard, account details, etc.
	
--figure out not putting all routes in app.js. Maybe put the settings routes into the doctorsettings.js

--create another header. one for home screen. one for vet screen (no search bar, just calendar, inbox button (chat), settings (make header like airbnb)
	--hide search bar in the vet pages (see app.js)	

figure out what to do when user not verified in the doctor/patient pages. can't just log unverified
-- consider adding a verified row to patient_credneitals

start using bootstrap or integrate tailwind css classes. tell chatgpt to make pages prettier (header, etc.)