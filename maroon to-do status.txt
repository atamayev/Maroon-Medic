To-do:


ASAP:
Frontend TS Fixes:
	1. Give return types to all functions, for functions that don't return, make the return type void
	3. go through https://www.sitepoint.com/how-to-migrate-a-react-app-to-typescript/, other recommended ts config setup
	5. Search for all cases of React.Dispatch where the type of the state is not set (or the state is set inside, like in change-password.ts. They should all be of this form: React.Dispatch<React.SetStateAction<LoginHistoryItem[]>>
	6. Bring back the max lines per function
	7. Remove all 'any' types
	8. make sure all IDs are numbers
	9. Accomodate for all res.status().jsons that were previously just res.jsons
	10. Change all 'render___' functions to be 'Render...', and make them JSX components intead of const functions <Render.../>
		Search for all {r
	


Full Stack TS changes
	1. Take full advantage of globals.d.ts to create reoccuring types
	2. Figure out a way to divide up the globals.d.ts into different categories (ie public doctor vs private, patient, etc.)
		Both back and fornt end
	3. Add to eslint that a return type is required from all functions (error)

Backend TS fixes
	2. Move to globals	
		type LoginOrRegisterType = "Doctor" | "Patient"
		type MysqlTimestamp = string


Change gender, other commonly used options to enum (only if the value is used in multiple places). If not, enum not necessary

Merge the vet dashboard/patient dashboard urls into one page. Will save a lot of re-direct logic, also it's useless to have different dashboard routes.
	Same for all teh other 'vet-specific' routes that are in common wiht patient specific routes. 


-React browser warnins when adding pre_vet/vet education (see 7/4 keys commit)

added a appointment_timespan, and add petID to the Appointments table. - need to change the front-end accordingly
-add choose your pet to make an appointment. if the user isn't logged in, show a login/register button in the booking section.
	the first question should be: choose which pet you would like to take to the vet
		if the user only has one vet, skip that question, and just set the state to that pet/pettype
	if the vet doesn't service that specific pet type, then show message: "Dr. __ doesn't service [type of pet]". Have a dummy button that says: "Search for vets near you that service [pet type]"
	after the appointment is made, should go to a confirmation page after the 'finalize-booking' page, which lists the details in pretty format. from there, have a button: go to dashboard

-setup postman to make making requests easier.
	add the Doctor/Patient UUID as a cookie, and hit the endpoint directly
		or, make the UUID be a header (ie authorizatoin header) whenever sending a req back and forth
			don't make it doctorUUID or patientUUID, just make it UUID. same for AccessToken
			think about the best way to structure the acess token/ uuid thing
Make the auth token and cookie stored in a class, like in context.ts in deployment manager
	reading from memory is faster than from session storage

Move data like personal info into a context. If it's used by multiple components, move it into a context. Every time you navigate, show the context data, but call the API to check for changes simultaneously
-mini bug when making a booking. make a booking with `changes in behavior`. The time is 10 AM- 10AM. Should say something like (10AM (july 17) - 10AM (july 18))

-start figuring out only being able to make appointments during available time slots (shouldn't be able to book an appointment while that time slot is booked)

-consider combining the two add preVet Education callback functions

-stop the header from re-rendering on every link change. figure out a way to make it constant

-try making an appointment, not requesting (in finalize-booking), going back, and making a different appointmet. does session storage updat?
-think about how isActive should work - what actually happens when a user deletes their account. should a new user be allowed to make an account with that same email instantaneosly?

make the phone number input in the location.js only accept numbers (Phone input)

-Move from bootstrap to tailwind

-duplicate entries need to be accounted for when added to DB. Unique constraints. when the same data is entered into the pre_vet_edcatinn_mapping table, it gives an error, but doesn't enter the data.
	Make the error on the front-end be say something like: duplicate entry. Or, don't allow the user to add the same entry twice
	Do this for all tables

--change all front-end select month, day, year into a "date", like in pets.js
	-make the date only be sometime in the past

- when registering as a patient, need to make it clear when the user is entering data regrading the human, and when about the pet

-Reviews:
	Patient's able to make a review after the appointment date is completed, given that the appointment is approved by the doctor.

On the vet dashboard, make the appointments clickable, shows the patients details, pet details, etc.
	Should go to a newly created appointment page, which nicely lays out the appointment details.
	If that event is clicked on from calendar view, it should go to that link as well

- go throgh DoctorDashboard Layout txt file

LATER:
-CODE CONCISION: Cut any function more than 100 lines into parts. I don't want massive functions - most can be distilled into smaller parts

-figure out IP Address situation (for the login and security page). Also see if can figure out what kind of device the user has

Make the "Add Address" Button Finalize a Location, make it within the accordion.
	So when add address is pressed, it becomes a pretty-looking text (can edit it by pressing a pencil in the top right or something)
	Add a new "Add new address" button to add a new acordion strip
	Won't need a save button. the add/delete buttons will act as saves. will need to make the delete button double confirmation like everything else

Add a section in doctordetails for wheather or not the doc works for a practice/company (will neeed to create a lookup and mapping table for vet companies as options)

Do the calculations for the next appointment dates on the back-end. Will need to figure out which dates/times area unavailable due to conflicting appointments.
	Also, due to the detailed_booking_availblity fields (how far in advance to book, etc.)

-Add an admin user type (manages/can see multiple doctor's activities)

-Add an Administrator user Type (God-mode, for me to log into any account in a read-only mode)
	assume someone's personality, not able to edit (read only)

--while loading, dashboard, account details should be like this:
	https://react-bootstrap.github.io/components/placeholder/

-- consider adding a verified column to the Credentials table (verify for both pts and docs) - not sure how to verify pts, would be a steep onboarding

-allow for entering multiple degrees from one college (without causing the education table to break (because of the constraint))

inactivity logout ( 5 mins). implement on the verification level (in the jwt)

-I think the real selling point for pts to use the platform is knowing ahead of time if their insurance provider will cover a certain service. Will either require a lot of research, or data searching.
	Ask Phil if insurances openly disclose what they will/won't cover for which type of pets.
	Figure out a way to make it really user for users to figure out if their insurance covers a certain procedure.

-make entering time data into location.js easier. currently a pain in the ass, keeps reseting

-Look deeply at the SQL table operations. see if it's worth de-normalizing any of the tables to increase performance.
	For example, the Doctor_ID didn't used to be in the Appointments table. The address ID was joined from the addresses table, and the DoctorID was extracted from there.
	Even though that is normalized (not duplicating Doctor ID twice), it leads to performance problems, since the enter addresses table is joined with appointments, just to retrieve the DoctorID
	Check for any other SQL operations which perform heavy joins that could have an efficiency boost from de-normalizing data
